import discord
import asyncio
import logging
import os
import random
from typing import Optional, Dict

logger = logging.getLogger(__name__)

class BunkerAudioManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤—ã–º —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ–º –¥–ª—è –∏–≥—Ä—ã –ë—É–Ω–∫–µ—Ä"""
    
    def __init__(self, bot):
        self.bot = bot
        self.voice_clients: Dict[int, discord.VoiceClient] = {}  # game_id -> voice_client
        self.audio_settings = {
            "enabled": True,
            "volume": 0.5,
            "sound_effects": True,
            "background_music": True,
            "voice_notifications": True
        }
        
        # –ü—É—Ç–∏ –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞)
        self.sounds = {
            # –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–∞—è –º—É–∑—ã–∫–∞
            "lobby_music": "sounds/bunker/lobby_ambient.mp3",
            "game_music": "sounds/bunker/bunker_ambient.mp3",
            "tension_music": "sounds/bunker/tension.mp3",
            "victory_music": "sounds/bunker/victory.mp3",
            "defeat_music": "sounds/bunker/defeat.mp3",
            
            # –ó–≤—É–∫–∏ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ
            "nuclear_alarm": "sounds/bunker/nuclear_siren.mp3",
            "virus_alert": "sounds/bunker/biohazard.mp3",
            "earthquake": "sounds/bunker/earthquake.mp3",
            "explosion": "sounds/bunker/explosion.mp3",
            
            # –ó–≤—É–∫–∏ —Å–æ–±—ã—Ç–∏–π
            "card_reveal": "sounds/bunker/card_flip.mp3",
            "voting_start": "sounds/bunker/voting_bell.mp3",
            "player_expelled": "sounds/bunker/expulsion.mp3",
            "event_triggered": "sounds/bunker/emergency.mp3",
            "secret_room": "sounds/bunker/door_open.mp3",
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            "player_joined": "sounds/bunker/footsteps.mp3",
            "round_start": "sounds/bunker/countdown.mp3",
            "game_start": "sounds/bunker/bunker_close.mp3",
            
            # –ì–æ–ª–æ—Å–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            "welcome": "sounds/bunker/voice/welcome.mp3",
            "catastrophe_announce": "sounds/bunker/voice/catastrophe.mp3",
            "voting_time": "sounds/bunker/voice/voting.mp3",
        }
    
    async def connect_to_voice(self, game_id: int, voice_channel) -> bool:
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É –¥–ª—è –∏–≥—Ä—ã"""
        try:
            if game_id in self.voice_clients:
                await self.disconnect_from_voice(game_id)
            
            voice_client = await voice_channel.connect()
            self.voice_clients[game_id] = voice_client
            logger.info(f"üéµ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É –¥–ª—è –∏–≥—Ä—ã {game_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É: {e}")
            return False
    
    async def disconnect_from_voice(self, game_id: int):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        if game_id in self.voice_clients:
            try:
                await self.voice_clients[game_id].disconnect()
                del self.voice_clients[game_id]
                logger.info(f"üîá –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∏–≥—Ä—ã {game_id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {e}")
    
    async def play_sound(self, game_id: int, sound_key: str, volume: Optional[float] = None, wait_finish: bool = False):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∑–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç"""
        if not self.audio_settings["enabled"] or not self.audio_settings["sound_effects"]:
            return
            
        if game_id not in self.voice_clients:
            return
        
        voice_client = self.voice_clients[game_id]
        if not voice_client.is_connected():
            return
        
        sound_path = self.sounds.get(sound_key)
        if not sound_path:
            logger.warning(f"‚ö†Ô∏è –ó–≤—É–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ: {sound_key}")
            return
            
        if not os.path.exists(sound_path):
            logger.warning(f"‚ö†Ô∏è –ó–≤—É–∫–æ–≤–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {sound_path}")
            return
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if voice_client.is_playing():
                voice_client.stop()
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
            if volume is None:
                volume = self.audio_settings["volume"]
            
            # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∞—É–¥–∏–æ
            source = discord.FFmpegPCMAudio(sound_path)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
            if volume != 1.0:
                source = discord.PCMVolumeTransformer(source, volume=volume)
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
            voice_client.play(source, after=lambda e: logger.error(f'‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}') if e else None)
            
            # –û–∂–∏–¥–∞–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if wait_finish:
                while voice_client.is_playing():
                    await asyncio.sleep(0.1)
                    
            logger.info(f"üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –∑–≤—É–∫: {sound_key}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ {sound_key}: {e}")
    
    async def play_background_music(self, game_id: int, music_key: str, loop: bool = True):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É"""
        if not self.audio_settings["background_music"]:
            return
        
        await self.play_sound(game_id, music_key, volume=0.2)  # –¢–∏—à–µ –¥–ª—è —Ñ–æ–Ω–∞
        
        # –ó–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∏
        if loop:
            asyncio.create_task(self._loop_background_music(game_id, music_key))
    
    async def _loop_background_music(self, game_id: int, music_key: str):
        """–ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É"""
        while game_id in self.voice_clients:
            try:
                voice_client = self.voice_clients[game_id]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                if not voice_client.is_connected():
                    break
                    
                if not voice_client.is_playing():
                    await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç—Ä–µ–∫–∞–º–∏
                    await self.play_sound(game_id, music_key, volume=0.2)
                    
                await asyncio.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–∏ –º—É–∑—ã–∫–∏: {e}")
                break
    
    async def stop_all_audio(self, game_id: int):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∞—É–¥–∏–æ –¥–ª—è –∏–≥—Ä—ã"""
        if game_id in self.voice_clients:
            voice_client = self.voice_clients[game_id]
            if voice_client.is_playing():
                voice_client.stop()
                logger.info(f"‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞—É–¥–∏–æ –¥–ª—è –∏–≥—Ä—ã {game_id}")
    
    async def set_volume(self, volume: float):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—â—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å (0.0 - 1.0)"""
        self.audio_settings["volume"] = max(0.0, min(1.0, volume))
        logger.info(f"üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {volume}")
    
    def toggle_audio(self, audio_type: str = "all"):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∞—É–¥–∏–æ"""
        if audio_type == "all":
            self.audio_settings["enabled"] = not self.audio_settings["enabled"]
        elif audio_type in self.audio_settings:
            self.audio_settings[audio_type] = not self.audio_settings[audio_type]
            
        logger.info(f"üîß –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –∞—É–¥–∏–æ —Ç–∏–ø '{audio_type}': {self.audio_settings.get(audio_type, self.audio_settings['enabled'])}")
    
    async def play_catastrophe_sound(self, game_id: int, catastrophe_type: str):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∑–≤—É–∫ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞"""
        sound_map = {
            # –ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —É–≥—Ä–æ–∑—ã
            "–õ–µ—Ç–∞–ª—å–Ω—ã–π –≤–∏—Ä—É—Å": "voice/lethal-virus",
            "–ó–æ–º–±–∏-–≤–∏—Ä—É—Å": "voice/zombie-virus",
            
            # –Ø–¥–µ—Ä–Ω—ã–µ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã
            "–ó–∞ –¥–µ–Ω—å –¥–æ —è–¥–µ—Ä–Ω–æ–π –≤–æ–π–Ω—ã": "voice/one-day-before-nuclear-war",
            "–Ø–¥–µ—Ä–Ω–∞—è –∑–∏–º–∞": "voice/nuclear-winter",
            
            # –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã
            "–ó–∞—Ä–∞–∂–µ–Ω–∏–µ –º–∏—Ä–æ–≤–æ–≥–æ –æ–∫–µ–∞–Ω–∞": "voice/ocean-contamination",
            "–ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞": "voice/climate-catastrophe",
            "–ì–ª–æ–±–∞–ª—å–Ω–æ–µ –ø–æ—Ç–µ–ø–ª–µ–Ω–∏–µ": "voice/global-warming",
            
            # –ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ —É–≥—Ä–æ–∑—ã
            "–ê—Ç–∞–∫–∞ –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è": "voice/alien-attack",
            "–†–∞–∑—Ä—É—à–µ–Ω–∏–µ –õ—É–Ω—ã": "voice/lunar-destroy",
            "–°–æ–ª–Ω–µ—á–Ω—ã–π —Å—É–ø–µ—Ä-—à—Ç–æ—Ä–º": "voice/solar-superstorm",
            
            # –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã
            "–ù–µ–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–µ –Ω–∞–Ω–æ—Ä–æ–±–æ—Ç—ã": "voice/uncontrollable-nanorobots",
            "–¶–∏—Ñ—Ä–æ–≤–æ–π –∑–∞—Ö–≤–∞—Ç —Ä–∞–∑—É–º–∞": "voice/digital-mind-control",
            
            # –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã
            "–í–µ–ª–∏–∫–∏–π –Ω–µ—Ñ—Ç—è–Ω–æ–π –∫—Ä–∏–∑–∏—Å": "voice/grand-oil-crisis",
            "–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –≤—É–ª–∫–∞–Ω–æ–≤": "voice/volcano-awakening",
            
            # –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã
            "–ó–∞–≥–∞–¥–æ—á–Ω—ã–µ –º–∏—Ä–∞–∂–∏": "voice/mysterious-mirages",
            "–ö–æ–ª–æ–¥–µ—Ü –≤ –ø—Ä–µ–∏—Å–ø–æ–¥–Ω—é—é": "voice/borehole-to-hell",
            
            # –ü–ª–∞–Ω–µ—Ç–∞—Ä–Ω—ã–µ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã
            "–ó–∞—á–∏—Å—Ç–∫–∞ –ø–ª–∞–Ω–µ—Ç—ã –æ—Ç –ª—é–¥–µ–π": "voice/planet-cleaning",
            "–ù—É–ª–µ–≤–∞—è –ø–æ–ª—è—Ä–Ω–æ—Å—Ç—å": "voice/zero-polarity"
        }
        
        sound_key = sound_map.get(catastrophe_type, "voice/catastrophe")  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –∑–≤—É–∫, –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω
        await self.play_sound(game_id, sound_key, volume=0.8, wait_finish=True)
        logger.info(f"üö® –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –≥–æ–ª–æ—Å –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã: {catastrophe_type} -> {sound_key}")
    
    async def play_event_sound(self, game_id: int, event_name: str):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∑–≤—É–∫ —Å–æ–±—ã—Ç–∏—è –≤ –±—É–Ω–∫–µ—Ä–µ"""
        event_sounds = {
            "–ü—Ä–æ–±–ª–µ–º—ã —Å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ–º": "event_triggered",
            "–£—Ç–µ—á–∫–∞ —Ä–∞–¥–∏–∞—Ü–∏–∏": "nuclear_alarm", 
            "–ù–µ—Ö–≤–∞—Ç–∫–∞ –µ–¥—ã": "event_triggered",
            "–ü—Ä–æ–±–ª–µ–º—ã —Å –≤–æ–¥–æ–π": "event_triggered",
            "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å": "event_triggered",
            "–ü–æ–∂–∞—Ä": "explosion",
            "–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ": "virus_alert",
            "–ü–æ–ª–æ–º–∫–∞ —Å–∏—Å—Ç–µ–º —Å–≤—è–∑–∏": "event_triggered",
            "–ù–∞–ø–∞–¥–µ–Ω–∏–µ –∏–∑–≤–Ω–µ": "explosion",
            "–î–µ–ø—Ä–µ—Å—Å–∏—è –∂–∏—Ç–µ–ª–µ–π": "event_triggered"
        }
        
        sound_key = event_sounds.get(event_name, "event_triggered")
        await self.play_sound(game_id, sound_key, volume=0.6)
        logger.info(f"‚ö†Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –∑–≤—É–∫ —Å–æ–±—ã—Ç–∏—è: {event_name} -> {sound_key}")
    
    def get_audio_status(self, game_id: int) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞—É–¥–∏–æ –¥–ª—è –∏–≥—Ä—ã"""
        connected = game_id in self.voice_clients
        playing = connected and self.voice_clients[game_id].is_playing() if connected else False
        
        return {
            "connected": connected,
            "playing": playing,
            "settings": self.audio_settings.copy()
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞—É–¥–∏–æ
bunker_audio_manager = None 